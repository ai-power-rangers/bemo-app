---
alwaysApply: true
---

# Bemo iOS App Architecture Guide

This project follows **MVVM-S** (Model-View-ViewModel-Service) architecture with a modular game engine system.

## üèóÔ∏è Architecture Overview

### Core Pattern: MVVM-S
- **Models**: Simple Swift structs (RecognizedPiece, PlayerActionOutcome)
- **Views**: SwiftUI views for UI presentation
- **ViewModels**: `@Observable` classes handling presentation logic
- **Services**: Business logic, networking, CV processing (injected via DependencyContainer)

### Key Components
- **AppCoordinator**: Central navigation controller managing app flow
- **DependencyContainer**: Service locator providing all services via dependency injection
- **Game Engine**: Protocol-based modular system for adding games without engine modification

## üìÅ Project Structure

```
Bemo/
‚îú‚îÄ‚îÄ App/BemoApp.swift              # App entry point with @main
‚îú‚îÄ‚îÄ Core/
‚îÇ   ‚îú‚îÄ‚îÄ AppCoordinator.swift       # Navigation management + DI
‚îÇ   ‚îî‚îÄ‚îÄ DependencyContainer.swift  # Service creation & injection
‚îú‚îÄ‚îÄ Features/
‚îÇ   ‚îú‚îÄ‚îÄ Game/Engine/               # Game framework protocols
‚îÇ   ‚îú‚îÄ‚îÄ Game/Games/*/              # Individual game implementations
‚îÇ   ‚îú‚îÄ‚îÄ Lobby/                     # Game selection
‚îÇ   ‚îî‚îÄ‚îÄ ParentDashboard/           # Parent controls
‚îú‚îÄ‚îÄ Services/                      # Business logic layer
‚îî‚îÄ‚îÄ Shared/Models/                 # Data models
```

## üéÆ Game Engine Architecture

### Adding a New Game

1. **Implement Game Protocol**:
```swift
class MyGame: Game {
    let id = "my_game"
    let title = "My Game"
    let description = "Game description"
    let recommendedAge = 5...10
    let thumbnailImageName = "my_game_thumb"
    
    func makeGameView(delegate: GameDelegate) -> AnyView {
        AnyView(MyGameView(viewModel: MyGameViewModel(delegate: delegate)))
    }
    
    func processRecognizedPieces(_ pieces: [RecognizedPiece]) -> PlayerActionOutcome {
        // Process CV input and return outcome
    }
    
    func reset() { /* Reset game state */ }
    func saveState() -> Data? { /* Serialize state */ }
    func loadState(from data: Data) { /* Restore state */ }
}
```

2. **Create Game View & ViewModel**:
```swift
import Observation

struct MyGameView: View {
    private let viewModel: MyGameViewModel
    
    var body: some View {
        // Game UI implementation
    }
}

@Observable
class MyGameViewModel {
    private weak var delegate: GameDelegate?
    var gameState: GameState = .ready
    
    init(delegate: GameDelegate) {
        self.delegate = delegate
    }
    
    func onLevelComplete() {
        delegate?.gameDidCompleteLevel(xpAwarded: 100)
    }
    
    func onQuitRequested() {
        delegate?.gameDidRequestQuit()
    }
}
```

## üîÑ Data Flow Pattern

**CV Input Flow**:
```
CVService ‚Üí RecognizedPiece[] ‚Üí GameHostViewModel ‚Üí Game.processRecognizedPieces() 
‚Üí PlayerActionOutcome ‚Üí UI Update + Delegate callbacks
```

**Navigation Flow**:
```
AppCoordinator ‚Üí DependencyContainer ‚Üí ViewModel(services) ‚Üí View
```

## üõ†Ô∏è Service Implementation Pattern

### Creating a New Service

```swift
@Observable
class MyService {
    private let apiClient: APIClient
    var data: [DataModel] = []
    
    init(apiClient: APIClient = APIClient()) {
        self.apiClient = apiClient
    }
    
    func fetchData() async throws {
        let response = try await apiClient.fetch()
        await MainActor.run {
            self.data = response
        }
    }
}
```

### Service Registration in DependencyContainer:

```swift
class DependencyContainer {
    let myService: MyService
    
    init() {
        self.myService = MyService()
        // ... other services
    }
}
```

## üì± ViewModel Implementation Pattern

### Standard ViewModel Structure:

```swift
@Observable
class MyViewModel {
    // MARK: - Observable Properties
    var state: ViewState = .loading
    var items: [Item] = []
    var errorMessage: String?
    
    // MARK: - Dependencies
    private let service: MyService
    private let onAction: (Action) -> Void
    
    // MARK: - Initialization
    init(service: MyService, onAction: @escaping (Action) -> Void) {
        self.service = service
        self.onAction = onAction
        setupObservation()
    }
    
    // MARK: - Setup
    private func setupObservation() {
        // Observable services automatically propagate changes
        // No manual binding required
    }
    
    // MARK: - Actions
    func loadData() {
        state = .loading
        Task {
            do {
                try await service.fetchData()
                await MainActor.run {
                    self.items = service.data
                    self.state = .loaded
                }
            } catch {
                await MainActor.run {
                    self.state = .error
                    self.errorMessage = error.localizedDescription
                }
            }
        }
    }
}
```

## üß≠ Navigation Pattern

### AppCoordinator Navigation:

```swift
// In AppCoordinator
@Observable
class AppCoordinator {
    private var currentState: AppState = .lobby
    
    enum AppState {
        case lobby
        case game(Game)
        case parentDashboard
        case newFeature(FeatureData)  // Adding new states
    }
}

// Navigation callbacks in ViewModels
let onFeatureRequested: (FeatureData) -> Void

// In View creation
MyFeatureView(viewModel: MyFeatureViewModel(
    service: dependencyContainer.myService,
    onComplete: { [weak self] in
        self?.currentState = .lobby
    }
))
```

## üìã Common Implementation Patterns

### 1. Adding a New Feature Module

```swift
// 1. Create ViewModel with dependencies
@Observable
class NewFeatureViewModel {
    private let requiredService: RequiredService
    private let onComplete: () -> Void
    
    init(requiredService: RequiredService, onComplete: @escaping () -> Void) {
        self.requiredService = requiredService
        self.onComplete = onComplete
    }
}

// 2. Create SwiftUI View
struct NewFeatureView: View {
    private let viewModel: NewFeatureViewModel
    
    var body: some View {
        // Implementation
    }
}

// 3. Add to AppCoordinator navigation
case .newFeature:
    NewFeatureView(viewModel: NewFeatureViewModel(
        requiredService: dependencyContainer.requiredService,
        onComplete: { [weak self] in
            self?.currentState = .lobby
        }
    ))
```

### 3. Reactive State Management

```swift
// Service exposes observable data
@Observable class GameService {
    var gameData: [GameData] = []
}

// ViewModel directly accesses and transforms
@Observable class GameListViewModel {
    private let service: GameService
    
    var filteredGames: [GameData] {
        service.gameData.filter { $0.isActive }
    }
    
    init(service: GameService) {
        self.service = service
    }
}
```

## üö´ Anti-Patterns to Avoid

- **DON'T** bypass AppCoordinator for navigation
- **DON'T** create services directly in ViewModels (use DI)
- **DON'T** make games depend on external services (use delegate pattern)
- **DON'T** put business logic in Views (belongs in ViewModels/Services)
- **DON'T** break the unidirectional data flow

## üìù File Header Template

```swift
//
//  FileName.swift
//  Bemo
//
//  Brief description of the file's purpose
//

// WHAT: What this file does and its main responsibility
// ARCHITECTURE: Where it fits in MVVM-S (ViewModel/Service/etc.)
// USAGE: How to use this file, key methods, initialization requirements
```
Follow these patterns for consistency and maintainability across the Bemo codebase.